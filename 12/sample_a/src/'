import javax.soud.midi.*;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequencer;

import java.util.*;
public class BeatModel implements BeatModelInterface, MetaEventListerner {
    Sequencer sequencer;
    ArrayList<BeatObserver> beatObservers = new ArrayList<BeatObserver>();
    ArrayList<BPMObserver> bpmObservers   = new ArrayList<BPMObserver>();
    int bpm = 90;
    Sequence sequence;
    Track track;

    void initialize(){
        setUpMidi();
        buildTrackAndStart();
    }

    void on(){
        System.out.println("シーケンサーをスタート");
        setBPM(90);
        sequencer.start();
    }
    void off() {
        setBPM(0);
        sequencer.stop();
    }
    void setBPM(int bpm) {
        this.bpm = bpm;
        sequencer.setTempoInBPM(getBPM());
        // 状態の変化を通知する
        notifyBPMObservers();
    }
    int getBPM() {
        return bpm;
    }
    void beatEvent() {
        notifyBeatObservers();
    }

    void registerObserver(BeatObserver o) {
        beatObservers.add(o);
    }
    void notifyBeatObservers(BPMObserver o) {
        for(int i = 0; i < beatObservers.size(); i++) {
            BeatObserver observer = (BeatObserver)beatObservers.get(i);
            observer.updateBeat();
        }
    }
    void registerObserver(BPMObserver o) {
        bpmObservers.add(o);
    }
    void notifyBpmObservers(BPMObserver o) {
        for(int i = 0; i < bpmObservers.size(); i++) {
            BPMObserver observer = (BPMObserver)bpmObservers.get(i);
            observer.updateBeat();
        }
    }

    void removeObserver(BeatObserver o) {
        int i = beatObservrs.indexOf(o);
        if(i >= 0) {
            beatObservbers.remove(i);
        }
    }

    void removeObserver(BPMObserver o) {
        int i = bpmObservrs.indexOf(o);
        if(i >= 0) {
            bpmObservgers.remove(i);
        }
    }

    public void meta(MetaMessage message) {
        if(message.getType() == 47) {
            beatEvent();
            sequencer.start();
            setBPM(getBPM());
        }
    }
    public void setUpMidi() {
        try {
            sequencer = MidiSystem.getSequencer();
            sequencer.open();
            sequencer.addMetaEventListener(this);
            sequence  = new Sequence(Sequence.PPQ,4);
            track     = sequence.createTrack();
            sequencer.setTempoInBPM(getBPM());
        } catch (Exception e){
            e.printStackTrace();
        }
    }
    public void buildTrackAndStart() {
        int[] trackList = {35, 0, 46, 0};
        sequence.deleteTrack(null);
        track = sequence.createTrack();
        makeTracks(trackList);
        track.add(makeEvent(192,9,1,0,4));
        try {
            sequencer.setSequence(sequence);
        } catch(Exception e) {

        }
    }
}
